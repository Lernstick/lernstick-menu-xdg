#!/bin/sh

# gettext support
. gettext.sh
export TEXTDOMAIN=lernstick_backup

SCREENSHOT_DIRECTORY="/home/user/Screenshots"

# source config file
CONFIG_FILE="/etc/lernstickWelcome"
if [ -f ${CONFIG_FILE} ]
then
	. ${CONFIG_FILE}
else
	# config file does not (yet) exist
	exit 0
fi

if [ "${Backup}" != "true" ]
then
	# continuous backup is not enabled
	exit 0
fi

do_rdiff()
{
	# make sure that the backup destination directory exists
	DESTINATION="${2}"
	if [ ! -d "${DESTINATION}" ]
	then
		mkdir -p "${DESTINATION}"
	fi

	rdiff-backup -v3 "${1}" "${DESTINATION}"
	RETURN_VALUE=$?
	echo "RETURN_VALUE=\"${RETURN_VALUE}\""
	if [ ${RETURN_VALUE} -eq 0 ]
	then
		delete_old_backups "${DESTINATION}"
	else
		ERROR_MESSAGE="$(eval_gettext "<div align="left">Backup to<br><tt>\${DESTINATION}</tt><br>failed!</div>")"
		sudo -u user notify-send -i dialog-error "${ERROR_MESSAGE}"
		sudo -u user kdialog --error "${ERROR_MESSAGE}" &
	fi
}

delete_old_backups()
{
	# When using a FAT32 partition as destination there is a problem:
	# With the long filenames rdiff-backup is using for its status files
	# in the rdiff-backup-data directory FAT32 can only save between
	# 11000 and 12000 files there.
	# After that all backup and repair runs just fail.
	# To prevent this disaster from happening again (yes, this happened at
	# a customer site) we limit the number of backups to keep.
	# There are at least 5 files per backup timestamp, so limiting the number
	# of backups to 500 seems to be a good default.
	MAX_COUNTER=500
	echo "trying to keep only ${MAX_COUNTER} backups..."
	COUNTER=$(rdiff-backup -l --parsable-output "$1" | wc -l)
	echo "There are ${COUNTER} backups"
	OVERHEAD=$((${COUNTER}-${MAX_COUNTER}))
	echo "overhead: ${OVERHEAD}"
	if [ ${OVERHEAD} -gt 0 ]
	then
		echo "we should delete old backups"
		TIMESTAMP=$(rdiff-backup -l --parsable-output $1 | sed -n $((${OVERHEAD}+1))p | awk '{ print $1 }')
		echo "last timestamp to keep: ${TIMESTAMP}"
		rdiff-backup --force --remove-older-than ${TIMESTAMP} "$1"
	else
		echo "we don't need to delete old backups"
	fi
}

do_backup()
{
	if [ "${BackupScreenshot}" = "true" ]
	then
		# make sure that the screenshots directory exists
		if [ ! -d "${SCREENSHOT_DIRECTORY}" ]
		then
			mkdir -p "${SCREENSHOT_DIRECTORY}"
			chmod 700 "${SCREENSHOT_DIRECTORY}"
		fi
		sudo -u user import -window root /tmp/screenshot.png
		mv /tmp/screenshot.png "${SCREENSHOT_DIRECTORY}/screenshot $(date +"%Y-%m-%d %H.%M.%S").png"
	fi

	if [ "${BackupDirectoryEnabled}" = "true" ]
	then
		do_rdiff "${BackupSource}" "${BackupDirectory}"
	fi

	if [ "${BackupPartitionEnabled}" = "true" ]
	then
		BACKUP_DEVICE="$(blkid -l -o device -t LABEL="${BackupPartition}")"
		if [ ${BACKUP_DEVICE} ]
		then
			MOUNT_POINT="$(grep ${BACKUP_DEVICE} /proc/mounts | awk '{ print $2 }')"
			echo "mount point of ${BACKUP_DEVICE}: \"${MOUNT_POINT}\""
			if [ -z "${MOUNT_POINT}" ]
			then
				MOUNT_DIR="/mnt/backup/"
				MOUNT_POINT="${MOUNT_DIR}/${BackupPartition}"
				mkdir -p "${MOUNT_POINT}"
				chown root.root "${MOUNT_DIR}"
				chmod 700  "${MOUNT_DIR}"
				echo "calling \"mount ${BACKUP_DEVICE} ${MOUNT_POINT}\""
				mount ${BACKUP_DEVICE} "${MOUNT_POINT}"
			fi
			do_rdiff "${BackupSource}" "${MOUNT_POINT}/lernstick_backup"
		else
			sudo -u user notify-send -i dialog-error "$(eval_gettext "<div align="left">Backup partition<br><tt>\${BackupPartition}</tt><br>not found!</div>")"
		fi
	fi
}


if [ "$1" = "once" ]
then
	do_backup
else
	TIMEOUT=$(expr ${BackupFrequency} \* 60)
	while true; do
		# get current time
		BEFORE="$(date +%s)"
		echo "BEFORE: ${BEFORE}"

		# execute command
		do_backup

		# wait until TIMEOUT is over
		AFTER="$(date +%s)"
		echo "AFTER: ${AFTER}"
		SLEEP=$(expr ${TIMEOUT} - ${AFTER} + ${BEFORE})
		if [ ${SLEEP} -gt 0 ]
		then
			echo "sleeping for ${SLEEP} seconds..."
			sleep ${SLEEP}
		else
			echo "timeout already passed!"
		fi
	done
fi
